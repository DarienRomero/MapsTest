{"version":3,"sources":["Map.js","credentials.js","LocationSearchInput.js","uploader.js","MyDropzone.js","App.jsx","index.js"],"names":["withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","LocationSearchInput","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","console","log","catch","error","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","React","Component","uploadFileToCloudinary","file","formdata","FormData","append","fetch","method","body","redirect","response","text","result","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","MyDropzone","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","a","Object","assign","preview","URL","createObjectURL","getRootProps","thumbs","src","name","useEffect","forEach","revokeObjectURL","App","googleMapURL","credentials","containerElement","mapElement","loadingElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6381cf45.chunk.js","sourcesContent":["import React from 'react';\r\nimport {GoogleMap, withScriptjs, withGoogleMap} from 'react-google-maps';\r\n\r\nconst Map = (props) => {\r\n    return (\r\n        <>\r\n            <GoogleMap \r\n            defaultZoom = {15}\r\n            defaultCenter={{ lat: -13.177294, lng: -74.206997}}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withScriptjs(\r\n    withGoogleMap(Map)\r\n)","export default {\r\n    mapsKey: \"AIzaSyDDSu8NhYMBVHBetXvCtTFfMg23zHmxRQo\"\r\n}","import React,{useState} from 'react';\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\n\r\n/* const LocationSearchInput = () => {\r\n  const [address, setAddress] = useState(\"\");\r\n  \r\n  const handleChange = address => {\r\n    setAddress(address);\r\n  };\r\n\r\n  const handleSelect = address => {\r\n    console.log(\"Se seleccionÃ³\");\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      value={address}\r\n      onChange={handleChange}\r\n      onSelect={handleSelect}\r\n    >\r\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div>\r\n          <input\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  key={suggestion.className}\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </PlacesAutocomplete>\r\n  );  \r\n} */\r\nclass LocationSearchInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { address: '' };\r\n  }\r\n \r\n  handleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: 'Search Places ...',\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationSearchInput;","const uploadFileToCloudinary = (file) => {\r\n    var formdata = new FormData();\r\n    formdata.append(\"archivo\", file);\r\n\r\n    var requestOptions = {\r\n    method: 'PUT',\r\n    body: formdata,\r\n    redirect: 'follow'\r\n    };\r\n\r\n    fetch(\"http://localhost:8080/api/uploads/usuarios/607840620f68de3968571ed5\", requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => console.log(result))\r\n    .catch(error => console.log('error', error));\r\n}\r\nexport default uploadFileToCloudinary;","import React, {useEffect, useState} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport uploadFileToCloudinary from './uploader';\r\n\r\nconst thumbsContainer = {\r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  flexWrap: 'wrap',\r\n  marginTop: 16\r\n};\r\n\r\nconst thumb = {\r\n  display: 'inline-flex',\r\n  borderRadius: 2,\r\n  border: '1px solid #eaeaea',\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: 'border-box'\r\n};\r\n\r\nconst thumbInner = {\r\n  display: 'flex',\r\n  minWidth: 0,\r\n  overflow: 'hidden'\r\n};\r\n\r\nconst img = {\r\n  display: 'block',\r\n  width: 'auto',\r\n  height: '100%'\r\n};\r\n\r\n\r\nconst MyDropzone = (props) => {\r\n  const [files, setFiles] = useState([]);\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: async(acceptedFiles) => {\r\n      console.log(\"Seleccion\");\r\n      console.log(acceptedFiles);\r\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n      })));\r\n      await uploadFileToCloudinary(acceptedFiles[0]);\r\n    }\r\n  });\r\n  \r\n  const thumbs = files.map(file => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img\r\n          src={file.preview}\r\n          style={img}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  useEffect(() => () => {\r\n    // Make sure to revoke the data uris to avoid memory leaks\r\n    files.forEach(file => URL.revokeObjectURL(file.preview));\r\n  }, [files]);\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n      <aside style={thumbsContainer}>\r\n        {thumbs}\r\n      </aside>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MyDropzone;","import React from 'react';\r\nimport Map from './Map';\r\nimport credentials from './credentials';\r\nimport LocationSearchInput from './LocationSearchInput';\r\nimport MyDropzone from './MyDropzone';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <LocationSearchInput/>\r\n            <Map \r\n                googleMapURL= {`https://maps.googleapis.com/maps/api/js?v=3.exp&key=${credentials.mapsKey}`}\r\n                containerElement= {<div style= {{height: '400px'}}/>}\r\n                mapElement = {<div style={{height:'100%'}}/>}\r\n                loadingElement= {<p>Cargando</p>}\r\n            />\r\n            <MyDropzone/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}